name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          python -m pytest tests/ -v --tb=short
      
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test  # Only deploy if tests pass
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            echo "üöÄ Starting deployment..."
            echo "=================================================="
            
            # Navigate to project directory
            cd /home/ubuntu/trump_trader
            
            # 1. STOP SERVICES FIRST (clean shutdown)
            echo "üõë Stopping services..."
            sudo systemctl stop trump-trader.service || true
            sudo systemctl stop trump-trader-telegram.service || true
            
            # 2. KILL ANY ORPHANED PYTHON PROCESSES (using exact PID matching)
            echo "üßπ Cleaning up any orphaned processes..."
            # Find and kill main.py processes
            MAIN_PIDS=$(ps aux | grep "python.*main.py start" | grep -v grep | awk '{print $2}')
            if [ ! -z "$MAIN_PIDS" ]; then
              echo "Killing main.py PIDs: $MAIN_PIDS"
              for pid in $MAIN_PIDS; do
                sudo kill -9 $pid 2>/dev/null || true
              done
            fi
            
            # Find and kill telegram_bot_handler.py processes
            TELEGRAM_PIDS=$(ps aux | grep "python.*telegram_bot_handler.py" | grep -v grep | awk '{print $2}')
            if [ ! -z "$TELEGRAM_PIDS" ]; then
              echo "Killing telegram_bot_handler.py PIDs: $TELEGRAM_PIDS"
              for pid in $TELEGRAM_PIDS; do
                sudo kill -9 $pid 2>/dev/null || true
              done
            fi
            
            sleep 2
            
            # Verify no processes are running
            MAIN_COUNT=$(ps aux | grep "python.*main.py" | grep -v grep | wc -l)
            TELEGRAM_COUNT=$(ps aux | grep "python.*telegram_bot_handler.py" | grep -v grep | wc -l)
            if [ "$MAIN_COUNT" -ne 0 ] || [ "$TELEGRAM_COUNT" -ne 0 ]; then
              echo "‚ùå ERROR: Failed to stop all processes"
              echo "Main: $MAIN_COUNT, Telegram: $TELEGRAM_COUNT"
              ps aux | grep -E 'main.py|telegram_bot_handler.py' | grep python | grep -v grep
              exit 1
            fi
            echo "‚úÖ All processes stopped"
            
            # 3. BACKUP CURRENT VERSION (in case rollback needed)
            echo "üíæ Creating backup..."
            BACKUP_DIR="/home/ubuntu/trump_trader_backups"
            mkdir -p $BACKUP_DIR
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            cp -r /home/ubuntu/trump_trader/.git/refs/heads/main $BACKUP_DIR/main_${TIMESTAMP} || true
            
            # 4. PULL LATEST CODE
            echo "üì• Pulling latest code from main branch..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd
            
            # 5. ACTIVATE VIRTUAL ENVIRONMENT
            echo "üêç Activating virtual environment..."
            source venv/bin/activate
            
            # 6. INSTALL/UPDATE DEPENDENCIES
            echo "üì¶ Installing dependencies..."
            pip install --upgrade pip --quiet
            pip install -r requirements.txt --quiet
            
            # 7. VERIFY .env.production EXISTS
            echo "üîç Verifying configuration..."
            if [ ! -f ".env.production" ]; then
              echo "‚ùå ERROR: .env.production not found!"
              exit 1
            fi
            echo "‚úÖ Configuration verified"
            
            # 7.5. RUN DATABASE MIGRATIONS
            echo "üóÑÔ∏è  Running database migrations..."
            python -c "from src.database.models import Base; from src.database.repository import DatabaseRepository; import logging; logging.basicConfig(level=logging.INFO); db = DatabaseRepository(); db.engine.echo = False; Base.metadata.create_all(db.engine); print('‚úÖ Database schema created/updated')" || echo "‚ö†Ô∏è  Migration warning (might be ok if tables exist)"
            
            # 8. UPDATE SYSTEMD SERVICE FILES (in case they changed)
            echo "üìã Updating systemd service files..."
            sudo cp deploy/trump-trader.service /etc/systemd/system/
            sudo cp deploy/trump-trader-telegram.service /etc/systemd/system/
            
            # 8.5. RELOAD SYSTEMD
            echo "üîÑ Reloading systemd daemon..."
            sudo systemctl daemon-reload
            
            # 9. START SERVICES IN CORRECT ORDER
            echo "‚ñ∂Ô∏è  Starting services..."
            
            # Start Telegram handler first (no conflicts)
            sudo systemctl start trump-trader-telegram.service
            sleep 2
            
            # Then start main bot
            sudo systemctl start trump-trader.service
            sleep 5
            
            # 10. VERIFY SERVICES ARE RUNNING
            echo "‚úÖ Verifying services..."
            
            if ! sudo systemctl is-active --quiet trump-trader-telegram.service; then
              echo "‚ùå ERROR: Telegram handler failed to start"
              sudo journalctl -u trump-trader-telegram.service --no-pager -n 50
              exit 1
            fi
            
            if ! sudo systemctl is-active --quiet trump-trader.service; then
              echo "‚ùå ERROR: Main bot failed to start"
              sudo journalctl -u trump-trader.service --no-pager -n 50
              exit 1
            fi
            
            echo "‚úÖ Both services running"
            
            # 11. VERIFY NO DUPLICATE PROCESSES
            echo "üîç Checking for duplicate processes..."
            MAIN_PROCS=$(ps aux | grep "python.*main.py" | grep -v grep | wc -l)
            TELEGRAM_PROCS=$(ps aux | grep "python.*telegram_bot_handler.py" | grep -v grep | wc -l)
            
            if [ "$MAIN_PROCS" -ne 1 ]; then
              echo "‚ùå ERROR: Found $MAIN_PROCS main.py processes (expected 1)"
              ps aux | grep "main.py" | grep python | grep -v grep
              exit 1
            fi
            
            if [ "$TELEGRAM_PROCS" -ne 1 ]; then
              echo "‚ùå ERROR: Found $TELEGRAM_PROCS telegram_bot_handler processes (expected 1)"
              ps aux | grep "telegram_bot_handler.py" | grep python | grep -v grep
              exit 1
            fi
            
            echo "‚úÖ No duplicate processes found"
            
            # 12. FINAL STATUS CHECK
            echo ""
            echo "=================================================="
            echo "üéâ DEPLOYMENT SUCCESSFUL!"
            echo "=================================================="
            echo ""
            echo "üìä Service Status:"
            sudo systemctl status trump-trader.service --no-pager -l | head -15
            echo ""
            sudo systemctl status trump-trader-telegram.service --no-pager -l | head -15
            echo ""
            echo "üî¢ Process Count:"
            echo "  Main Bot: $MAIN_PROCS process(es)"
            echo "  Telegram Handler: $TELEGRAM_PROCS process(es)"
            echo ""
            echo "‚úÖ Deployment completed successfully at $(date)"
            echo "=================================================="
            
      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi

